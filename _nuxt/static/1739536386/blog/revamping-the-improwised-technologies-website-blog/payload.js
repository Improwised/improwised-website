__NUXT_JSONP__("/blog/revamping-the-improwised-technologies-website-blog", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D){return {data:[{blog:{id:r,status:o,sort:r,date_created:"2022-11-23T10:03:04.431Z",date_updated:"2024-05-29T07:47:49.553Z",title:v,description:"\u003Cp\u003EAt Improwised Technologies, we believe in innovation and forward-thinking that lead to improvement and optimization. We strive to provide our customers with the most efficient and effective web solutions. So we set upon a humble journey to optimize and improve the process of our website.\u003C\u002Fp\u003E",seo_title:v,seo_description:"Discover how Improwised Technologies revamped the website to achieve the perfect blend of dynamic and static content.",content:"\u003Cp\u003E\u003Cstrong\u003EWhy we needed a website revamp?&nbsp;\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EAs an evolving organization, it became the need of the hour to empower teams with flexibility and independence. We wanted to give each team the freedom to manage the needs of their departmental content.&nbsp;\u003C\u002Fp\u003E\n\u003Cp\u003EHowever, we didnâ€™t want to let go of the benefits of a static website like reliability, cost-effectiveness, ease of maintenance, and much better SEO.&nbsp;\u003C\u002Fp\u003E\n\u003Cp\u003ETo achieve the best of both worlds for the new website, we decided to use our forte of creating a tailor-made solution.&nbsp;\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EA sneak into our tailor-made website solution&nbsp;\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002F_nuxt\u002Fimage\u002Ff5e096.png\" alt=\"Website Redesign.drawio\" width=\"800\" height=\"708\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EFirst of all, we decided to go with a content management system that is powerful and flexible that makes it easy for teams to manage content and keep it up to date.&nbsp;\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EWhat made us choose the Directus CMS?\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EAfter evaluating Strapi, Ghost &amp; Directus, we finalized to go with Directus as it fulfills the majority of our requirements. With its intuitive user interface, robust schema, and easy deployment process, teams can quickly and easily update content and keep their users informed.&nbsp;\u003C\u002Fp\u003E\n\u003Cp\u003EIt also allows teams to track changes to the content and view the content in a rich UI that helps users make more informed decisions.&nbsp;\u003C\u002Fp\u003E\n\u003Cp\u003EAll of the content created in Directus is powered by a secure REST API, meaning anything can be synced with our website or apps.&nbsp;\u003C\u002Fp\u003E\n\u003Cp\u003EThe core of all content management is the schema, after defining a customized schema we can add content.&nbsp;\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002F_nuxt\u002Fimage\u002F895178.png\" alt=\"Content Screenshot\" width=\"600\" height=\"590\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFinally, \u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eby using this method, teams can easily roll out content without being concerned about the intricacies of the deployment process with a few clicks.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EWhy did a need to establish a review system arise?&nbsp;\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAdministrators have granted individual teams access to their schemas. Communication and teamwork will be improved as a result. Administrative team members are able to manage their roles and responsibilities.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAlso, websites earlier did not have anything like CI\u002FCD (Continuous Integration\u002FContinuous Deployment), so if anything was pushed to master that would serve directly without any review system. So many times it added to the work of a developer.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"javascript\" data-pm-slice=\"1 1 []\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003E# This is a basic workflow that is manually triggered\n\nname: staging\n\n# Controls when the action will run. Workflow runs when manually triggered using the UI\n# or API.\non:\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    defaults:\n      run:\n        shell: bash\n        working-directory: app\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n    - uses: actions\u002Fcheckout@v2\n    # Runs a single command using the runners shell\n    - name: install node_modules\n      run: npm install\n    - name: copy env\n      run: cp .env.staging .env\n    - name: webpack build\n      run: npm run webpack:build\n    - name: static generate\n      run: npm run generate\n    - name: Deploy\n      uses: peaceiris\u002Factions-gh-pages@v3\n      with:\n        personal_token: ${{ secrets.PERSONAL_TOKEN }}\n        publish_dir: .\u002Fapp\u002Fpublic\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIt led to an increased need to check for typos as well which is sometimes counterinitiative. So a need for a staging mechanism to verify all the content before those changes were made live and to add accountability for the content which is a much-needed request as the organization grows.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESo there you have it! After verification, production GitHub Action would be triggered manually, it would transfer the latest build to a public GitHub repository. From there, Cloudflare provides a secure connection and GitHub Pages host the website.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"javascript\" data-pm-slice=\"1 1 []\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003E# This is a basic workflow that is manually triggered\n\nname: production\n\n# Controls when the action will run. Workflow runs when manually triggered using the UI\n# or API.\non:\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    defaults:\n      run:\n        shell: bash\n        working-directory: app\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n    - uses: actions\u002Fcheckout@v2\n    # Runs a single command using the runners shell\n    - name: install node_modules\n      run: npm install\n    - name: copy env\n      run: cp .env.production .env\n    - name: webpack build\n      run: npm run webpack:build\n    - name: static generate\n      run: npm run generate\n    - name: update CNAME\n      run: echo \"www.improwised.com\" &gt; public\u002FCNAME\n    - name: Deploy\n      uses: peaceiris\u002Factions-gh-pages@v3\n      with:\n        personal_token: ${{ secrets.PERSONAL_TOKEN }}\n        external_repository: improwised\u002Fwebsite\n        publish_dir: .\u002Fapp\u002Fpublic\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003E\u003Cstrong\u003EHow we achieved the perfect blend of a dynamic and static website?&nbsp;\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIn order to achieve a fully static website, we served assets from the repo in addition to using the API link in the src attribute. To accomplish this, custom logic was returned in async data. This logic was responsible for downloading assets from the API and saving them in the static folder when the Nuxt.js generate command was run.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EBy doing this, we were able to preserve the benefits of static websites, such as faster load times and ease of maintenance.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThe Nuxt.js framework, supported by vue &amp; Directus API, is used to create the static website. Assets were consciously organized into categories based on how frequently they changed while the old theme was transferred to the new nuxt.js framework.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAssets with frequent changes went into Directus, while those that are permanently untouched status stay in the repo. For instance, the company address, technology stack, and logo.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block with-line-numbers\" data-language=\"javascript\" data-pm-slice=\"1 1 []\"\u003E\n\u003Cpre\u003E\u003Ccode spellcheck=\"false\"\u003E&lt;template&gt;\n  &lt;div class=\"main-container about-us\"&gt;\n    &lt;section class=\"text-center heroUnit\"&gt;\n      &lt;div class=\"container\"&gt;\n        &lt;div class=\"row\"&gt;\n          &lt;div class=\"col-sm-10 col-md-8\"&gt;\n            &lt;h1 class=\"\"&gt;Our Story&lt;\u002Fh1&gt;\n            &lt;Breadcrumb class=\"m-0\" \u002F&gt;\n          &lt;\u002Fdiv&gt;\n        &lt;\u002Fdiv&gt;\n        &lt;!--end of row--&gt;\n      &lt;\u002Fdiv&gt;\n      &lt;!--end of container--&gt;\n    &lt;\u002Fsection&gt;\n    &lt;section v-if=\"aboutUs\" class=\"text-center\"&gt;\n      &lt;div class=\"container\"&gt;\n        &lt;div class=\"row\"&gt;\n          &lt;div\n            class=\"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 text-left lead\"\n            v-html=\"aboutUs.content\"\n          &gt;&lt;\u002Fdiv&gt;\n        &lt;\u002Fdiv&gt;\n        &lt;!--end of row--&gt;\n      &lt;\u002Fdiv&gt;\n      &lt;!--end of container--&gt;\n    &lt;\u002Fsection&gt;\n  &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\nimport Breadcrumb from \"@\u002Fcomponents\u002Fbreadcrumb.vue\";\nexport default {\n  components: {\n    Breadcrumb,\n  },\n  layout: \"theme\",\n  async asyncData({ app, params }) {\n    const aboutUs = await app.$axios.$get(app.$urls.aboutUs);\n    return {\n      aboutUs: aboutUs.data\n    };\n  }\n};\n&lt;\u002Fscript&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWe hope you like the new website and that it offers you a great experience. We strived to make our website more user-friendly and reliable.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E",slug:"revamping-the-improwised-technologies-website-blog",user_created:{id:"a8418846-5723-4563-86df-99615438090f",first_name:"Mansi",last_name:"Pancholi",email:"mansi@improwised.com",password:c,location:a,title:a,description:a,tags:a,avatar:"86701c80-2aba-48e2-90c1-d47cda4fdcd3",language:"en-US",tfa_secret:a,status:d,role:e,token:a,last_access:"2024-07-23T08:33:31.218Z",last_page:"\u002Fcontent\u002Fteam",provider:f,external_identifier:a,auth_data:a,email_notifications:g,appearance:a,theme_dark:a,theme_light:a,theme_light_overrides:a,theme_dark_overrides:a},user_updated:{id:b,first_name:h,last_name:i,email:j,password:c,location:a,title:k,description:a,tags:a,avatar:l,language:a,tfa_secret:a,status:d,role:e,token:a,last_access:m,last_page:n,provider:f,external_identifier:a,auth_data:a,email_notifications:g,appearance:a,theme_dark:a,theme_light:a,theme_light_overrides:a,theme_dark_overrides:a},image:{id:"950824db-f908-420a-ae48-ce3785513695",storage:p,filename_disk:"950824db-f908-420a-ae48-ce3785513695.png",filename_download:"code-refactoring-icon-vector-image-can-be-used-mobile-app-development_120816-273070-removebg-preview.png",title:"Code Refactoring Icon Vector Image Can Be Used Mobile App Development 120816 273070 Removebg Preview",type:s,folder:q,uploaded_by:b,created_on:w,modified_by:a,modified_on:"2024-05-29T07:47:41.548Z",charset:a,filesize:"88455",width:x,height:x,duration:a,embed:a,description:a,location:a,tags:a,metadata:{},focal_point_x:a,focal_point_y:a,tus_id:a,tus_data:a,uploaded_on:w},tags:[{id:22,blog_id:r,tags_id:{name:"Optimization"}}]},blogList:[{id:t,status:o,sort:a,date_created:"2025-02-14T12:24:38.854Z",date_updated:a,title:y,description:"\u003Cp\u003EContinuous Integration (CI) has often been positioned as a cornerstone of DevOps practices, but its impact extends far beyond deployment pipelines and operations efficiency. For developers, CI is a critical tool that can fundamentally alter the way code is written, tested, and maintained.\u003C\u002Fp\u003E",seo_title:y,seo_description:"Continuous Integration (CI) has often been positioned as a cornerstone of DevOps practices, but its impact extends far beyond deployment pipelines and operations efficiency.",content:"\u003Cp dir=\"ltr\"\u003EUnderstanding CI from a developer's perspective highlights its role in reducing incidents, minimizing technical debt, and improving code stability&mdash;all without the need for late-night incident responses.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003E\u003Cimg src=\"https:\u002F\u002Fdata.improwised.com\u002Fassets\u002F9000a609-29f1-4837-8976-f0a73fd2e9fd.png?width=auto&amp;height=auto\" alt=\"   Visual Selection (1)\"\u003E\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EThe Core Principle: Immediate Feedback Loops\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003EAt its core, CI revolves around the principle of integrating code changes frequently and validating those changes through automated builds and tests. This process generates immediate feedback on the health of the codebase. For developers, immediate feedback is not just a convenience; it is a mechanism to detect regressions and integration issues at the earliest possible stage.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EWhen code is merged without thorough validation, issues can propagate undetected, becoming more complex and time-consuming to resolve. CI systems ensure that each code commit triggers automated workflows that validate functionality, security, and performance against a baseline. This reduces the cognitive load on developers, who no longer need to manually verify integrations or rely solely on local environments.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EShift-Left Testing: Embedding Quality Early\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003ECI enables shift-left testing, where testing activities occur earlier in the development cycle. Automated unit tests, integration tests, and static code analysis tools run as part of CI pipelines. This approach uncovers defects when they are cheaper to fix, both in terms of time and resources.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EFor developers, this translates to a more predictable workflow. Instead of discovering critical bugs during staging or after deployment, issues surface immediately after code submission. Developers are still in context, familiar with the recent changes, which accelerates debugging and reduces the risk of introducing additional errors during fixes.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003ECode Review Automation: Beyond Human Validation\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003ECode reviews are essential for maintaining code quality, but human reviewers can miss issues, especially under tight deadlines. CI enhances code review processes through automated checks that enforce coding standards, security guidelines, and architectural principles.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003ETools integrated within CI pipelines can perform static code analysis, dependency checks, and vulnerability scans. This automation acts as the first line of defense, allowing human reviewers to focus on architectural decisions and logic validation rather than formatting issues or common security pitfalls.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EDependency Management and Version Control Hygiene\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003EModern software projects rely heavily on third-party libraries and dependencies. Managing these dependencies manually can introduce version conflicts, security vulnerabilities, and inconsistent behavior across environments.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003ECI systems can automate dependency updates and perform compatibility checks with existing codebases. This process includes running comprehensive test suites whenever a dependency changes, ensuring that updates do not break functionality. Developers can merge changes with confidence, knowing that automated workflows have validated compatibility and stability.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003ECI encourages better version control practices. Features like branch protection rules, commit status checks, and automated merges reduce the likelihood of unreviewed code entering production. This structure supports disciplined workflows where every change is traceable, reviewed, and tested.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EIncident Reduction Through Automated Rollbacks\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003EMidnight firefights often result from production issues that were not detected during earlier testing phases. CI, when combined with Continuous Deployment (CD), supports automated rollback mechanisms. If a deployment introduces an issue, CI\u002FCD pipelines can detect the failure through health checks and monitoring integrations, triggering an automatic rollback to the last known good state.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EFor developers, this reduces the stress of deploying new code. Knowing that robust rollback mechanisms are in place allows for faster iteration without the fear of irreversible failures. It shifts the focus from reactive troubleshooting to proactive prevention.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EPerformance Testing as a First-Class Citizen\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003EPerformance regressions can be as disruptive as functional bugs, yet they are often overlooked until applications are under load in production environments. CI pipelines can integrate performance testing tools that run benchmarks against critical application paths with every change.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EThese tests measure metrics such as response times, resource utilization, and throughput. By establishing performance baselines and tracking deviations, developers receive early warnings when a code change negatively impacts system efficiency. This proactive approach minimizes performance-related incidents in production.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EObservability-Driven Development\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003ECI systems can integrate with observability tools, providing developers with insights into application behavior across different environments. Metrics, logs, and traces collected during automated test executions help identify non-obvious issues such as race conditions, memory leaks, or intermittent failures.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EThis integration promotes observability-driven development, where insights from CI pipelines inform code improvements. Developers gain a deeper understanding of how their code performs under various conditions, leading to more resilient applications and fewer production surprises.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EInfrastructure as Code (IaC) Validation\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003EFor teams adopting Infrastructure as Code practices, CI pipelines can validate infrastructure changes alongside application code. This includes syntax validation, security scanning, and integration testing of infrastructure configurations.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EAutomating these checks reduces the risk of infrastructure-related incidents, such as misconfigured network rules or resource allocation errors. Developers working with cloud-native architectures benefit from this automation, as it ensures infrastructure changes are tested with the same rigor as application code.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EContinuous Documentation and Knowledge Sharing\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003ECI can automate the generation and validation of technical documentation. Code comments, API documentation, and architectural diagrams can be automatically updated as part of the CI process. This reduces the burden on developers to maintain documentation manually and ensures that documentation stays synchronized with the codebase.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EAutomated documentation fosters knowledge sharing across teams, reducing the dependency on specific individuals for system understanding. This distributed knowledge model contributes to faster incident resolution when issues do occur.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EConclusion\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003EContinuous Integration is more than a DevOps tool; it is an integral part of the developer workflow that reduces technical debt, minimizes the frequency and severity of production incidents, and enhances code quality. By embedding CI deeply into the development process, organizations can shift from reactive firefighting to proactive engineering, where stability and reliability are byproducts of disciplined automation. For developers, this means fewer late-night pages and more time focused on building robust, maintainable software.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong id=\"docs-internal-guid-7a8cce81-7fff-7b00-bcc9-c9e04c1e32b1\"\u003E\u003Cbr\u003E\u003Cbr\u003E\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E",slug:"ci-isn-t-just-for-dev-ops",user_created:{id:b,first_name:h,last_name:i,email:j,password:c,location:a,title:k,description:a,tags:a,avatar:l,language:a,tfa_secret:a,status:d,role:e,token:a,last_access:m,last_page:n,provider:f,external_identifier:a,auth_data:a,email_notifications:g,appearance:a,theme_dark:a,theme_light:a,theme_light_overrides:a,theme_dark_overrides:a},user_updated:a,image:{id:"5c4464de-beb8-4330-ac62-5e71835a2501",storage:p,filename_disk:"5c4464de-beb8-4330-ac62-5e71835a2501.png",filename_download:"Untitled_design_(2)_bg_removed.png.png",title:"Untitled Design (2) Bg Removed.png",type:s,folder:q,uploaded_by:b,created_on:"2025-02-14T12:22:41.272Z",modified_by:a,modified_on:"2025-02-14T12:22:41.761Z",charset:a,filesize:"358981",width:z,height:z,duration:a,embed:a,description:a,location:a,tags:a,metadata:{},focal_point_x:a,focal_point_y:a,tus_id:a,tus_data:a,uploaded_on:"2025-02-14T12:22:41.756Z"},tags:[{id:43,blog_id:t,tags_id:16},{id:44,blog_id:t,tags_id:17}]},{id:u,status:o,sort:a,date_created:"2025-02-13T03:21:20.186Z",date_updated:"2025-02-13T13:26:51.258Z",title:A,description:"\u003Cp\u003EContinuous Delivery (CD) pipelines are the backbone of modern software development. They automate the process of building, testing, and deploying code changes, enabling teams to release software frequently and reliably. A well-crafted CD pipeline, much like a Swiss watch, operates with precision, efficiency, and dependability.&nbsp;\u003C\u002Fp\u003E",seo_title:A,seo_description:"Continuous Delivery (CD) pipelines are the backbone of modern software development. They automate the process of building, testing, and deploying code changes, enabling teams to release software frequently and reliably. A well-crafted CD pipeline, much like a Swiss watch, operates with precision, efficiency, and dependability. This article explores the principles behind building such a pipeline and provides a practical guide to its construction.",content:"\u003Cp\u003EThis article explores the principles behind building such a pipeline and provides a practical guide to its construction.\u003C\u002Fp\u003E\n\u003Ch2 dir=\"ltr\"\u003EUnderstanding the Components of a CD Pipeline\u003C\u002Fh2\u003E\n\u003Cp dir=\"ltr\"\u003E\u003Cimg src=\"https:\u002F\u002Flh7-rt.googleusercontent.com\u002Fdocsz\u002FAD_4nXeocLVexHpok6UsD_Gq7WQWssPw-e5E4a87G9xBOjxalZlZaELvRGTTghQL1ptGJH31wIeRkWDSSlnLhqSaZPnERc0xwrU_5AiO5-Jl-5v8pdxZw1NoD8wgRbyBNsNEqSEE_WzReg?key=SZM1oqwX74GdlZ09KIeWtVvP\" width=\"auto\" height=\"auto\"\u003EA CD pipeline consists of several stages, each with specific functions that contribute to the overall deployment process. The key components include:\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003ESource Control Management (SCM)\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp dir=\"ltr\"\u003ESCM systems, such as Git, serve as the foundation for version control. They track changes to code and facilitate collaboration among developers. Integrating SCM with the pipeline ensures that every code change triggers the subsequent stages.\u003C\u002Fp\u003E\n\u003Col start=\"2\"\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003EBuild Automation\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp dir=\"ltr\"\u003EBuild automation tools, such as Jenkins or CircleCI, to compile source code into executable artifacts. This process includes dependency resolution, code compilation, and packaging. A well-defined build process minimizes errors and ensures consistency across environments.\u003C\u002Fp\u003E\n\u003Col start=\"3\"\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003ETesting Frameworks\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp dir=\"ltr\"\u003EAutomated testing frameworks, including unit tests, integration tests, and end-to-end tests, validate the functionality of the code. Incorporating a comprehensive suite of tests into the pipeline is essential for identifying issues early in the development cycle.\u003C\u002Fp\u003E\n\u003Col start=\"4\"\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003EArtifact Repository\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp dir=\"ltr\"\u003EAn artifact repository, such as Nexus or Artifactory, stores built artifacts. This component ensures that the correct versions of artifacts are available for deployment, facilitating traceability and rollback capabilities.\u003C\u002Fp\u003E\n\u003Col start=\"5\"\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003EDeployment Automation\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp dir=\"ltr\"\u003EDeployment automation tools, such as Kubernetes or Ansible, manage the deployment of artifacts to production environments. These tools enable consistent and repeatable deployments, reducing the risk of human error.\u003C\u002Fp\u003E\n\u003Col start=\"6\"\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003EMonitoring and Logging\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp dir=\"ltr\"\u003EMonitoring and logging systems, such as Prometheus or ELK Stack, provide insights into application performance and health. Integrating these systems into the pipeline allows for real-time feedback and facilitates rapid response to issues.\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cstrong\u003EDesigning the Pipeline\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EThe design of a CD pipeline should prioritize modularity and scalability. Each component must interact efficiently with others while maintaining independence. The following steps outline a structured approach to pipeline design:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EStep 1: Define the Workflow\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EEstablish a clear workflow that outlines the sequence of operations from code commit to deployment. This workflow should include:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003ETrigger events (e.g., code commits, pull requests)\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003EBuild and test stages\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003EDeployment strategies (e.g., blue-green deployments, canary releases)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cstrong\u003EStep 2: Implement Version Control Hooks\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EIntegrate hooks in the SCM to trigger the pipeline upon specific events. For instance, a push to the main branch can initiate the build process. This integration ensures that the pipeline responds promptly to code changes.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EStep 3: Configure Build Automation\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003ESet up build automation tools to compile code and run tests. Define build scripts that specify the build environment, dependencies, and commands. Ensure that the build process is reproducible across different environments.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EStep 4: Establish Testing Protocols\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EIncorporate automated testing at various stages of the pipeline. Unit tests should run during the build phase, while integration and end-to-end tests can be executed in a staging environment. This layered testing approach helps catch issues at different levels.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EStep 5: Manage Artifacts\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EConfigure an artifact repository to store built artifacts. Implement versioning strategies to ensure that each artifact is traceable. This practice facilitates rollback in case of deployment failures.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EStep 6: Automate Deployment\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EUtilize deployment automation tools to manage the deployment process. Define deployment scripts that specify the target environment and deployment strategy. Automate the rollback process to handle failures gracefully.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EStep 7: Integrate Monitoring and Logging\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EIncorporate monitoring and logging systems to track application performance and errors. Set up alerts for critical issues to enable rapid response. This integration provides valuable feedback for continuous improvement.\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cbr\u003EEnsuring Reliability and Precision\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003ETo achieve a CD pipeline that operates with the precision of a Swiss watch, several practices should be adopted:\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\"\u003E\u003Cbr\u003EContinuous Integration\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EImplement continuous integration (CI) practices to ensure that code changes are integrated into the main branch frequently. This approach reduces integration issues and promotes a stable codebase.\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cbr\u003EInfrastructure as Code (IaC)\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EUtilize IaC tools, such as Terraform or CloudFormation, to manage infrastructure. This practice allows for consistent environment provisioning and reduces configuration drift.\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\"\u003E\u003Cbr\u003ESecurity Integration\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EIncorporate security practices into the pipeline, often referred to as DevSecOps. Automate security testing and vulnerability scanning to identify potential risks early in the development process.\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\"\u003E\u003Cbr\u003EDocumentation\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EMaintain comprehensive documentation for each component of the pipeline. This documentation should include setup instructions, configuration details, and troubleshooting guides. Clear documentation facilitates knowledge transfer and onboarding of new team members.\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\"\u003EConclusion\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EA CD pipeline that functions with the precision of a Swiss watch requires meticulous design, implementation, and maintenance. Each component must be carefully integrated to ensure reliability and efficiency. Neglecting any aspect of the pipeline can lead to deployment failures, increased downtime, and diminished trust in the deployment process.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EThe consequences of a poorly designed CD pipeline extend beyond technical issues; they can impact team morale, customer satisfaction, and overall business performance. Therefore, investing time and resources into building a robust CD pipeline is essential for organizations aiming to deliver high-quality software consistently.\u003C\u002Fp\u003E",slug:"cd-pipeline-should-work-like-a-swiss-watch",user_created:{id:b,first_name:h,last_name:i,email:j,password:c,location:a,title:k,description:a,tags:a,avatar:l,language:a,tfa_secret:a,status:d,role:e,token:a,last_access:m,last_page:n,provider:f,external_identifier:a,auth_data:a,email_notifications:g,appearance:a,theme_dark:a,theme_light:a,theme_light_overrides:a,theme_dark_overrides:a},user_updated:{id:b,first_name:h,last_name:i,email:j,password:c,location:a,title:k,description:a,tags:a,avatar:l,language:a,tfa_secret:a,status:d,role:e,token:a,last_access:m,last_page:n,provider:f,external_identifier:a,auth_data:a,email_notifications:g,appearance:a,theme_dark:a,theme_light:a,theme_light_overrides:a,theme_dark_overrides:a},image:{id:"2db9bc72-b096-4fee-8c25-ccdbf4c695e6",storage:p,filename_disk:"2db9bc72-b096-4fee-8c25-ccdbf4c695e6.webp",filename_download:"CICDBlog.webp",title:"Cicd Blog",type:"image\u002Fwebp",folder:q,uploaded_by:b,created_on:"2025-02-13T03:20:51.812Z",modified_by:a,modified_on:"2025-02-13T03:20:52.518Z",charset:a,filesize:"196002",width:1170,height:560,duration:a,embed:a,description:a,location:a,tags:a,metadata:{},focal_point_x:a,focal_point_y:a,tus_id:a,tus_data:a,uploaded_on:"2025-02-13T03:20:52.515Z"},tags:[{id:41,blog_id:u,tags_id:5},{id:42,blog_id:u,tags_id:15}]},{id:B,status:o,sort:a,date_created:"2025-02-06T12:21:18.029Z",date_updated:"2025-02-12T10:37:21.343Z",title:C,description:"\u003Cp\u003EOpenTofu, a tool designed to enhance the functionality of Terraform, has introduced a significant security feature in its version 1.7.0: end-to-end state encryption. OpenTofu, a tool designed to enhance the functionality of Terraform, has introduced a significant security feature in its version 1.7.0: end-to-end state encryption.\u003C\u002Fp\u003E",seo_title:C,seo_description:"OpenTofu, a tool designed to enhance the functionality of Terraform, has introduced a significant security feature in its version 1.7.0: end-to-end state encryption. This feature addresses a critical security gap by ensuring that Terraform state files, which often contain sensitive data, are protected from unauthorized access. ",content:"\u003Ch3 dir=\"ltr\"\u003EThe Need for State File Encryption\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003ETerraform state files contain crucial information about the infrastructure managed by Terraform, including sensitive data such as database credentials, API keys, and other secrets. Historically, these state files were stored in plaintext, making them vulnerable to unauthorized access. If an attacker gained access to the state file, they could exploit the sensitive data to compromise the entire infrastructure.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003ETo mitigate this risk, users had to rely on third-party solutions, such as encrypting S3 buckets using AWS KMS or other key management systems. However, even with bucket-level encryption, the state files themselves remained in plaintext, exposing them to potential breaches if the storage was compromised.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003E\u003Cimg src=\"https:\u002F\u002Fdata.improwised.com\u002Fassets\u002Fa9120d12-fa33-4b66-b9d7-b8cf6cb9c615.png?width=auto&amp;height=auto\" alt=\"Screenshot From 2025 02 12 15 57 18\"\u003E\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\"\u003E\u003Cbr\u003EEnd-to-End State Encryption in OpenTofu 1.7.0\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EOpenTofu 1.7.0 introduces native end-to-end state encryption, ensuring that state files are encrypted both at rest and in transit. Here are the key components of this feature:\u003C\u002Fp\u003E\n\u003Ch4 dir=\"ltr\"\u003EEncryption Configuration\u003C\u002Fh4\u003E\n\u003Cp dir=\"ltr\"\u003ETo enable state file encryption in OpenTofu, users must add an encryption block to their configuration code or use the TF_ENCRYPTION environment variable. The encryption block requires the following parameters:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003Ekey_provider:\u003C\u002Fstrong\u003E This specifies the provider for the encryption key. Supported providers include PBKDF2, AWS KMS, GCP KMS, and OpenBao.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003E\u003Cstrong\u003Emethod: \u003C\u002Fstrong\u003EThis determines the encryption method to be used. Currently, the primary supported option is AES-GCM, which allows the use of 16, 24, or 32-byte keys.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp dir=\"ltr\"\u003EHere is an example of how the encryption block might be configured:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Eterraform {\n encryption {\n   key_provider \"aws_kms\" \"basic\" {\n     kms_key_id = \"a4f791e1-0d46-4c8e-b489-917e0bec05ef\"\n     region = \"us-east-1\"\n     key_spec = \"AES_256\"\n   }\n }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4 dir=\"ltr\"\u003E\u003Cbr\u003EKey Management\u003C\u002Fh4\u003E\n\u003Cp\u003EUsers can specify the encryption key directly or use a remote key provider. The ability to integrate with key management systems like AWS KMS, GCP KMS, or OpenBao enhances the security and manageability of the encryption keys. This integration allows for centralized key management and rotation, which is crucial for maintaining the security posture of the organization.\u003C\u002Fp\u003E\n\u003Ch4 dir=\"ltr\"\u003E\u003Cbr\u003EEncryption and Decryption Process\u003C\u002Fh4\u003E\n\u003Cp dir=\"ltr\"\u003EThe encryption process involves using the specified key to encrypt the state files. When the state files are stored on the local disk or transferred to a remote backend, they are encrypted. The encrypted files remain valid JSON files but are no longer readable without the decryption key.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EFor decryption, the same key used for encryption is required. OpenTofu also supports re-encrypting state or plan files with a newer key after decrypting them with an older key, facilitating key rotation and ensuring that the data remains secure even if older keys are compromised.\u003C\u002Fp\u003E\n\u003Ch4 dir=\"ltr\"\u003E\u003Cbr\u003ERemote State Files and Plan Files\u003C\u002Fh4\u003E\n\u003Cp dir=\"ltr\"\u003EThe state encryption feature in OpenTofu extends to remote state files and plan files. Users can encrypt remote state files using the terraform_remote_state data source, ensuring that sensitive data is protected even when accessed from remote backends. Plan files, which are undocumented binary files, can also be encrypted, though they require special handling due to their binary nature.\u003C\u002Fp\u003E\n\u003Ch3 dir=\"ltr\"\u003E\u003Cbr\u003EConfiguration Flexibility\u003C\u002Fh3\u003E\n\u003Cp dir=\"ltr\"\u003EOpenTofu provides flexibility in configuring the encryption settings. Users can specify the encryption configuration both in HCL code and through environment variables. This flexibility is particularly useful for reusing code across different environments, some of which may require encryption while others do not.\u003C\u002Fp\u003E\n\u003Cp dir=\"ltr\"\u003EHere is an example of using environment variables to configure encryption:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Eexport TF_ENCRYPTION=$(cat &lt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E\u003Cbr\u003EFallback Configurations and Key Rotation\u003C\u002Fh3\u003E\n\u003Cp\u003ETo ensure continuity and security, OpenTofu allows users to define fallback configurations. This feature facilitates automatic rollover to a different key or configuration if the primary key or configuration becomes unavailable. Key rotation is also supported, enabling users to decrypt data with an older key and then re-encrypt it with a newer key, which is essential for maintaining security best practices.\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cbr\u003ESecurity Implications\u003C\u002Fh3\u003E\n\u003Cp\u003EThe introduction of end-to-end state encryption in OpenTofu significantly enhances the security of Terraform state files. Here are some key security implications:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003EData Protection: State files are now encrypted both at rest and in transit, protecting sensitive data from unauthorized access. Even if an attacker gains access to the storage, they will not be able to read the encrypted data without the decryption key.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003ECompliance: This feature helps organizations comply with regulatory requirements that mandate the encryption of sensitive data. By ensuring that state files are encrypted, organizations can meet these compliance standards more effectively.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli dir=\"ltr\" aria-level=\"1\"\u003E\n\u003Cp dir=\"ltr\" role=\"presentation\"\u003ELayered Security: End-to-end encryption aligns with the layered security model, where multiple layers of security are implemented to protect data. This approach reduces the risk of data breaches by making it more difficult for attackers to access sensitive information.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003EConclusion\u003C\u002Fh3\u003E\n\u003Cp\u003EThe end-to-end state encryption feature in OpenTofu 1.7.0 is a critical enhancement for the security of Terraform state files. By encrypting state files natively, OpenTofu ensures that sensitive data is protected from unauthorized access, whether the files are stored locally or in remote backends.\u003C\u002Fp\u003E\n\u003Cp\u003EFailure to implement state file encryption can have severe consequences. Unencrypted state files are highly susceptible to unauthorized access, potentially leading to devastating data breaches and compromising the entire infrastructure. Moreover, neglecting encryption can result in serious violations of regulatory compliance, incurring significant fines and severely damaging the organization's reputation. Furthermore, without encryption, sensitive data within state files remains vulnerable to exploitation, continuously exposing the organization to significant security risks.\u003C\u002Fp\u003E\n\u003Cp\u003EIn summary, the end-to-end state encryption feature in OpenTofu is a necessary step towards securing sensitive data in Terraform state files. It aligns with best practices in data security and helps organizations maintain a robust security posture.\u003C\u002Fp\u003E",slug:"end-to-end-encryption-for-state-files-in-open-tofu",user_created:{id:b,first_name:h,last_name:i,email:j,password:c,location:a,title:k,description:a,tags:a,avatar:l,language:a,tfa_secret:a,status:d,role:e,token:a,last_access:m,last_page:n,provider:f,external_identifier:a,auth_data:a,email_notifications:g,appearance:a,theme_dark:a,theme_light:a,theme_light_overrides:a,theme_dark_overrides:a},user_updated:{id:b,first_name:h,last_name:i,email:j,password:c,location:a,title:k,description:a,tags:a,avatar:l,language:a,tfa_secret:a,status:d,role:e,token:a,last_access:m,last_page:n,provider:f,external_identifier:a,auth_data:a,email_notifications:g,appearance:a,theme_dark:a,theme_light:a,theme_light_overrides:a,theme_dark_overrides:a},image:{id:"8663b2a1-d96b-4328-82d9-20c6240b0413",storage:p,filename_disk:"8663b2a1-d96b-4328-82d9-20c6240b0413.png",filename_download:"download.png",title:"Download",type:s,folder:q,uploaded_by:b,created_on:"2025-02-06T12:20:59.909Z",modified_by:a,modified_on:"2025-02-06T12:21:00.412Z",charset:a,filesize:"122864",width:D,height:D,duration:a,embed:a,description:a,location:a,tags:a,metadata:{},focal_point_x:a,focal_point_y:a,tus_id:a,tus_data:a,uploaded_on:"2025-02-06T12:21:00.409Z"},tags:[{id:40,blog_id:B,tags_id:7}]}],_img:{"/_ipx/f_png/https://data.improwised.com/assets/1ec9da15-835a-436b-9bbf-3f5fede07d9c":"\u002F_nuxt\u002Fimage\u002Ff5e096.png","/_ipx/f_png/https://data.improwised.com/assets/4ef2b511-7338-436d-96a1-e2fb91625c27":"\u002F_nuxt\u002Fimage\u002F895178.png","/_ipx/_/img/logo.png":"\u002F_nuxt\u002Fimage\u002Fd4c006.png","/_ipx/_/img/fonts/menu.svg":"\u002F_nuxt\u002Fimage\u002Fb7846b.svg","/_ipx/h_400,f_webp/https://data.improwised.com/assets/950824db-f908-420a-ae48-ce3785513695":"\u002F_nuxt\u002Fimage\u002F9d68e3.webp","/_ipx/_/img/fonts/google-blue.svg":"\u002F_nuxt\u002Fimage\u002F342f2b.svg","/_ipx/_/img/fonts/linkedin-blue.svg":"\u002F_nuxt\u002Fimage\u002F23608e.svg","/_ipx/_/img/fonts/twitter-blue.svg":"\u002F_nuxt\u002Fimage\u002F2c1470.svg","/_ipx/_/img/fonts/facebook-blue.svg":"\u002F_nuxt\u002Fimage\u002F36ebdc.svg","/_ipx/_/img/fonts/whatsapp-blue.svg":"\u002F_nuxt\u002Fimage\u002F90c703.svg","/_ipx/s_75x27/img/logo.png":"\u002F_nuxt\u002Fimage\u002F36e495.png","/_ipx/_/img/fonts/facebook.svg":"\u002F_nuxt\u002Fimage\u002F710b89.svg","/_ipx/_/img/fonts/twitter.svg":"\u002F_nuxt\u002Fimage\u002F45ad31.svg","/_ipx/_/img/fonts/linkedin.svg":"\u002F_nuxt\u002Fimage\u002F285706.svg","/_ipx/_/img/fonts/up-open-big.svg":"\u002F_nuxt\u002Fimage\u002F2b0c17.svg","/_ipx/f_webp,h_400/https://data.improwised.com/assets/950824db-f908-420a-ae48-ce3785513695":"\u002F_nuxt\u002Fimage\u002F898227.webp"}}],fetch:{},mutations:[]}}(null,"f6ae4b64-c3c4-4f35-8b41-9f48088de4b1","**********","active","5ef170ac-f2e9-4b93-a9ea-5c54fcf0fa40","default",true,"Angita","Shah","angita.shah@improwised.com","SEO Specialist","20d037d1-41ee-4efd-b034-1350a3ce336d","2025-02-14T12:06:28.351Z","\u002Fcontent\u002Fblog","published","AMZ","46478a01-ff9b-4189-ad30-24734d885007",11,"image\u002Fpng",27,26,"Revamping the Improwised Technologies Website","2024-05-29T07:47:41.099Z",500,"Why CI Isnâ€™t Just for DevOpsâ€”A Developerâ€™s Secret to Fewer Midnight Firefights",2048,"Why Your CD Pipeline Should Work Like a Swiss Watch (And How to Build One)",25,"End-to-End Encryption for State Files in OpenTofu",575)));